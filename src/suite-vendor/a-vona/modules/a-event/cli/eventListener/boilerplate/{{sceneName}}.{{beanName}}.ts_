import type { IEventExecute, NextEvent } from 'vona-module-a-event';
import { BeanBase } from 'vona';
import { EventListener } from 'vona-module-a-event';

type TypeEventData = TypeEvent<%=argv.beanNameCapitalize%>Data;
type TypeEventResult = TypeEvent<%=argv.beanNameCapitalize%>Result;

@EventListener({ match: 'some-module:<%=argv.beanName%>' })
export class EventListener<%=argv.beanNameCapitalize%>
  extends BeanBase
  implements IEventExecute<TypeEventData, TypeEventResult>
{
  async execute(_data: TypeEventData, next: NextEvent<TypeEventData, TypeEventResult>): Promise<TypeEventResult> {
    // next
    return next();
  }
}
