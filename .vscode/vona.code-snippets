/**
 * supported code snippets as follows:
 *   __init__
 **/
{
  "__init__": {
    "scope": "typescript,typescriptreact",
    "prefix": "init",
    "body": ["protected __init__() {", "  $0", "}"],
    "description": "__init__",
  },
  "__dispose__": {
    "scope": "typescript,typescriptreact",
    "prefix": "dispose",
    "body": ["protected async __dispose__() {", "  $0", "}"],
    "description": "__dispose__",
  },
  "aop.__init__": {
    "scope": "typescript,typescriptreact",
    "prefix": "aopinit",
    "body": [
      "protected __init__: AopActionInit<BeanClassSome> = (_args, next, _receiver) => {",
      "  next();",
      "  $0",
      "}"
    ],
    "description": "aop.__init__"
  },
  "aop.__dispose__": {
    "scope": "typescript,typescriptreact",
    "prefix": "aopdispose",
    "body": [
      "protected __dispose__: AopActionDispose<BeanClassSome> = async (_args, next, _receiver) => {",
      "  $0",
      "  await next();",
      "}"
    ],
    "description": "aop.__dispose__"
  },
  "aop.__get__": {
    "scope": "typescript,typescriptreact",
    "prefix": "aopget",
    "body": [
      "protected __get__(prop: string, next: NextSync) {",
      "  const value = next();",
      "  return value;",
      "}"
    ],
    "description": "aop.__get__"
  },
  "aop.__set__": {
    "scope": "typescript,typescriptreact",
    "prefix": "aopset",
    "body": [
      "protected __set__(prop: string, value: any, next: NextSync): boolean {",
      "  return next(value);",
      "}"
    ],
    "description": "aop.__set__"
  },
  "aop.getter": {
    "scope": "typescript,typescriptreact",
    "prefix": "aopgetter",
    "body": [
      "protected __get_xxx__: AopActionGetter<BeanClassSome, 'xxx'> = function (next, _receiver) {",
      "  const value = next();",
      "  return value;",
      "}"
    ],
    "description": "aop.getter"
  },
  "aop.setter": {
    "scope": "typescript,typescriptreact",
    "prefix": "aopsetter",
    "body": [
      "protected __set_xxx__: AopActionSetter<BeanClassSome, 'xxx'> = function (value, next, _receiver) {",
      "  return next(value);",
      "}"
    ],
    "description": "aop.setter"
  },
  "aop.action": {
    "scope": "typescript,typescriptreact",
    "prefix": "aopaction",
    "body": [
      "action: AopAction<BeanClassSome, 'action'> = async (_args, next, _receiver) => {",
      "  $0",
      "  return await next();",
      "}"
    ],
    "description": "aop.action"
  },
  "aop.actionsync": {
    "scope": "typescript,typescriptreact",
    "prefix": "aopactionsync",
    "body": [
      "action: AopAction<BeanClassSome, 'action'> = (_args, next, _receiver) => {",
      "  $0",
      "  return next();",
      "}"
    ],
    "description": "aop.actionsync"
  },
  "aopmethod.get": {
    "scope": "typescript,typescriptreact",
    "prefix": "aopmethodget",
    "body": [
      "get(_options: IDecoratorAopMethodOptions, next: NextSync, _receiver: any, _prop: string) {",
      "  return next();",
      "}"
    ],
    "description": "aopmethod.get"
  },
  "aopmethod.set": {
    "scope": "typescript,typescriptreact",
    "prefix": "aopmethodset",
    "body": [
      "set(_options: IDecoratorAopMethodOptions, value: any, next: NextSync, _receiver: any, _prop: string): boolean {",
      "  return next(value);",
      "}"
    ],
    "description": "aopmethod.set"
  },
  "record.flavor": {
    "scope": "typescript,typescriptreact",
    "prefix": "recordflavor",
    "body": [
      "declare module '@cabloy/module-info' {",
      "  export interface VonaMetaFlavorExtend {",
      "    $0: never;",
      "  }",
      "}"
    ],
    "description": "record.flavor"
  },
  "record.loggerclient": {
    "scope": "typescript,typescriptreact",
    "prefix": "recordloggerclient",
    "body": [
      "declare module 'vona' {",
      "  export interface ILoggerClientRecord {",
      "    $0: never;",
      "  }",
      "}"
    ],
    "description": "record.loggerclient"
  },
  "record.redisclient": {
    "scope": "typescript,typescriptreact",
    "prefix": "recordredisclient",
    "body": [
      "declare module 'vona-module-a-redis' {",
      "  export interface IRedisClientRecord {",
      "    $0: never;",
      "  }",
      "}"
    ],
    "description": "record.redisclient"
  },
  "record.databaseclient": {
    "scope": "typescript,typescriptreact",
    "prefix": "recorddatabaseclient",
    "body": [
      "declare module 'vona-module-a-orm' {",
      "  export interface IDatabaseClientRecord {",
      "    $0: never;",
      "  }",
      "}"
    ],
    "description": "record.databaseclient"
  },
  "record.username": {
    "scope": "typescript,typescriptreact",
    "prefix": "recordusername",
    "body": [
      "declare module 'vona-module-a-user' {",
      "  export interface IUserNameRecord {",
      "    $0: never;",
      "  }",
      "}"
    ],
    "description": "record.username"
  },
  "record.rolename": {
    "scope": "typescript,typescriptreact",
    "prefix": "recordrolename",
    "body": [
      "declare module 'vona-module-a-user' {",
      "  export interface IRoleNameRecord {",
      "    $0: never;",
      "  }",
      "}"
    ],
    "description": "record.rolename"
  },
  "record.instance": {
    "scope": "typescript,typescriptreact",
    "prefix": "recordinstance",
    "body": [
      "declare module 'vona' {",
      "  export interface IInstanceRecord {",
      "    $0: never;",
      "  }",
      "}"
    ],
    "description": "record.instance"
  },
  "record.host": {
    "scope": "typescript,typescriptreact",
    "prefix": "recordhost",
    "body": [
      "declare module 'vona' {",
      "  export interface IHostRecord {",
      "    $0: never;",
      "  }",
      "}"
    ],
    "description": "record.host"
  },
  "record.menuItemLink": {
    "scope": "typescript,typescriptreact",
    "prefix": "recordmenuItemLink",
    "body": [
      "declare module 'vona-module-a-menu' {",
      "  export interface IMenuItemLinkRecord {",
      "    $0: never;",
      "  }",
      "}"
    ],
    "description": "record.menuItemLink"
  },
  "findManyQueryTransform": {
    "scope": "typescript,typescriptreact",
    "prefix": "findmanyquerytransform",
    "body": [
      "findManyQueryTransform(_info: IPipeOptionsQueryTransformInfo): boolean | undefined {",
      "  $0return undefined;"
      "}"
    ],
    "description": "findManyQueryTransform"
  }
}
