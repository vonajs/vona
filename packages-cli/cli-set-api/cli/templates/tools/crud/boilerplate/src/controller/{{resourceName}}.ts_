import type { TableIdentity } from 'table-identity';
import type { IQueryParams } from 'vona-module-a-orm';
import type { IDecoratorControllerOptions } from 'vona-module-a-web';
import type { Model<%=argv.resourceNameCapitalize%> } from '../model/<%=argv.resourceName%>.ts';
import { BeanBase } from 'vona';
import { Api, v } from 'vona-module-a-openapi';
import { Arg, Controller, Web } from 'vona-module-a-web';
import { Dto<%=argv.resourceNameCapitalize%>Create } from '../dto/<%=argv.resourceName%>Create.ts';
import { Dto<%=argv.resourceNameCapitalize%>Query } from '../dto/<%=argv.resourceName%>Query.ts';
import { Dto<%=argv.resourceNameCapitalize%>QueryRes } from '../dto/<%=argv.resourceName%>QueryRes.ts';
import { Dto<%=argv.resourceNameCapitalize%>Update } from '../dto/<%=argv.resourceName%>Update.ts';
import { Entity<%=argv.resourceNameCapitalize%> } from '../entity/<%=argv.resourceName%>.ts';

export interface IControllerOptions<%=argv.resourceNameCapitalize%> extends IDecoratorControllerOptions {}

@Controller<IControllerOptions<%=argv.resourceNameCapitalize%>>('<%=argv.resourceName%>')
export class Controller<%=argv.resourceNameCapitalize%> extends BeanBase {
  @Web.post()
  @Api.body(v.object(Entity<%=argv.resourceNameCapitalize%>))
  async create(@Arg.body() <%=argv.resourceName%>: Dto<%=argv.resourceNameCapitalize%>Create): Promise<Entity<%=argv.resourceNameCapitalize%>> {
    return await this.scope.service.<%=argv.resourceName%>.create(<%=argv.resourceName%>);
  }

  @Web.get()
  @Api.body(Dto<%=argv.resourceNameCapitalize%>QueryRes)
  async findMany(@Arg.queryPro(Dto<%=argv.resourceNameCapitalize%>Query) params: IQueryParams<Model<%=argv.resourceNameCapitalize%>>): Promise<Dto<%=argv.resourceNameCapitalize%>QueryRes> {
    return await this.scope.service.<%=argv.resourceName%>.findMany(params);
  }

  @Web.get(':id')
  @Api.body(v.object(Entity<%=argv.resourceNameCapitalize%>))
  async findOne(@Arg.param('id', v.tableIdentity()) id: TableIdentity): Promise<Entity<%=argv.resourceNameCapitalize%>> {
    const <%=argv.resourceName%> = await this.scope.service.<%=argv.resourceName%>.findOne(id);
    if (!<%=argv.resourceName%>) this.app.throw(404);
    return <%=argv.resourceName%>;
  }

  @Web.patch(':id')
  async update(@Arg.param('id', v.tableIdentity()) id: TableIdentity, @Arg.body() <%=argv.resourceName%>: Dto<%=argv.resourceNameCapitalize%>Update) {
    return await this.scope.service.<%=argv.resourceName%>.update(id, <%=argv.resourceName%>);
  }

  @Web.delete(':id')
  async remove(@Arg.param('id', v.tableIdentity()) id: TableIdentity) {
    return await this.scope.service.<%=argv.resourceName%>.remove(id);
  }
}
